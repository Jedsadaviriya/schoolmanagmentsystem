{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/app/noten/page.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function Noten() {\r\n  const [grades, setGrades] = useState([]);\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [grade, setGrade] = useState(\"\");\r\n\r\n  // Fetch grades when the component mounts\r\n  useEffect(() => {\r\n    async function fetchGrades() {\r\n      try {\r\n        const res = await fetch(\"/api/grades\");\r\n        const data = await res.json();\r\n        if (data.success) {\r\n          setGrades(data.grades);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching grades:\", error);\r\n      }\r\n    }\r\n    fetchGrades();\r\n  }, []);\r\n\r\n  // Handle form submission to save a new grade\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await fetch(\"/api/grades\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ subject, grade }),\r\n      });\r\n      const data = await res.json();\r\n      if (data.success) {\r\n        setGrades([\r\n          ...grades,\r\n          { subject, grade, createdAt: new Date().toISOString() },\r\n        ]);\r\n        setSubject(\"\");\r\n        setGrade(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving grade:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold\">Noten</h1>\r\n      <p>Hier werden die Noten eingetragen und berechnet.</p>\r\n\r\n      {/* Form to add a new grade */}\r\n      <div className=\"mt-4\">\r\n        <form onSubmit={handleSubmit} className=\"flex flex-col gap-4\">\r\n          <div>\r\n            <label htmlFor=\"subject\" className=\"block text-sm font-medium\">\r\n              Fach:\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"subject\"\r\n              value={subject}\r\n              onChange={(e) => setSubject(e.target.value)}\r\n              className=\"mt-1 p-2 border rounded w-full\"\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"grade\" className=\"block text-sm font-medium\">\r\n              Note:\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"grade\"\r\n              value={grade}\r\n              onChange={(e) => setGrade(e.target.value)}\r\n              className=\"mt-1 p-2 border rounded w-full\"\r\n              min=\"1\"\r\n              max=\"6\"\r\n              step=\"0.1\"\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"bg-blue-500 text-white p-2 rounded\">\r\n            Note speichern\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      {/* Display saved grades */}\r\n      <div className=\"mt-6\">\r\n        <h2 className=\"text-xl font-semibold\">Gespeicherte Noten</h2>\r\n        {grades.length > 0 ? (\r\n          <ul className=\"mt-2 space-y-2\">\r\n            {grades.map((entry, index) => (\r\n              <li key={index} className=\"p-2 border rounded\">\r\n                <span className=\"font-medium\">{entry.subject}</span>:{\" \"}\r\n                {entry.grade} (Eingetragen am:{\" \"}\r\n                {new Date(entry.createdAt).toLocaleDateString()})\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p>Keine Noten vorhanden.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAIe,SAAS;;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,yCAAyC;IACzC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;2BAAE;YACR,eAAe;gBACb,IAAI;oBACF,MAAM,MAAM,MAAM,MAAM;oBACxB,MAAM,OAAO,MAAM,IAAI,IAAI;oBAC3B,IAAI,KAAK,OAAO,EAAE;wBAChB,UAAU,KAAK,MAAM;oBACvB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,0BAA0B;gBAC1C;YACF;YACA;QACF;0BAAG,EAAE;IAEL,6CAA6C;IAC7C,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,IAAI;YACF,MAAM,MAAM,MAAM,MAAM,eAAe;gBACrC,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE;oBAAS;gBAAM;YACxC;YACA,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,IAAI,KAAK,OAAO,EAAE;gBAChB,UAAU;uBACL;oBACH;wBAAE;wBAAS;wBAAO,WAAW,IAAI,OAAO,WAAW;oBAAG;iBACvD;gBACD,WAAW;gBACX,SAAS;YACX;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uBAAuB;QACvC;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAqB;;;;;;0BACnC,6LAAC;0BAAE;;;;;;0BAGH,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAK,UAAU;oBAAc,WAAU;;sCACtC,6LAAC;;8CACC,6LAAC;oCAAM,SAAQ;oCAAU,WAAU;8CAA4B;;;;;;8CAG/D,6LAAC;oCACC,MAAK;oCACL,IAAG;oCACH,OAAO;oCACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;oCAC1C,WAAU;oCACV,QAAQ;;;;;;;;;;;;sCAGZ,6LAAC;;8CACC,6LAAC;oCAAM,SAAQ;oCAAQ,WAAU;8CAA4B;;;;;;8CAG7D,6LAAC;oCACC,MAAK;oCACL,IAAG;oCACH,OAAO;oCACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oCACxC,WAAU;oCACV,KAAI;oCACJ,KAAI;oCACJ,MAAK;oCACL,QAAQ;;;;;;;;;;;;sCAGZ,6LAAC;4BAAO,MAAK;4BAAS,WAAU;sCAAqC;;;;;;;;;;;;;;;;;0BAOzE,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAwB;;;;;;oBACrC,OAAO,MAAM,GAAG,kBACf,6LAAC;wBAAG,WAAU;kCACX,OAAO,GAAG,CAAC,CAAC,OAAO,sBAClB,6LAAC;gCAAe,WAAU;;kDACxB,6LAAC;wCAAK,WAAU;kDAAe,MAAM,OAAO;;;;;;oCAAQ;oCAAE;oCACrD,MAAM,KAAK;oCAAC;oCAAkB;oCAC9B,IAAI,KAAK,MAAM,SAAS,EAAE,kBAAkB;oCAAG;;+BAHzC;;;;;;;;;6CAQb,6LAAC;kCAAE;;;;;;;;;;;;;;;;;;AAKb;GA1GwB;KAAA","debugId":null}}]
}