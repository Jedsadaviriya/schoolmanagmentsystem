{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/app/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\"\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017/schoolManagementSystem\"\r\nconst MONGODB_DB = process.env.MONGODB_DB || \"schoolManagementSystem\"\r\n\r\n// Check if we're in production\r\nconst isProd = process.env.NODE_ENV === \"production\"\r\n\r\n// Connection caching\r\nlet cachedClient = null\r\nlet cachedDb = null\r\n\r\nexport async function connectToDatabase() {\r\n  // If we have a cached connection, use it\r\n  if (cachedClient && cachedDb) {\r\n    return { client: cachedClient, db: cachedDb }\r\n  }\r\n\r\n  // Set options for MongoDB client\r\n  const opts = {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  }\r\n\r\n  try {\r\n    // Connect to MongoDB\r\n    const client = await MongoClient.connect(MONGODB_URI, opts)\r\n    const db = client.db(MONGODB_DB)\r\n\r\n    // Cache the connection\r\n    cachedClient = client\r\n    cachedDb = db\r\n\r\n    return { client, db }\r\n  } catch (error) {\r\n    console.error(\"MongoDB connection error:\", error)\r\n    throw new Error(\"Failed to connect to database\")\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC/C,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAE7C,+BAA+B;AAC/B,MAAM,SAAS,oDAAyB;AAExC,qBAAqB;AACrB,IAAI,eAAe;AACnB,IAAI,WAAW;AAER,eAAe;IACpB,yCAAyC;IACzC,IAAI,gBAAgB,UAAU;QAC5B,OAAO;YAAE,QAAQ;YAAc,IAAI;QAAS;IAC9C;IAEA,iCAAiC;IACjC,MAAM,OAAO;QACX,iBAAiB;QACjB,oBAAoB;IACtB;IAEA,IAAI;QACF,qBAAqB;QACrB,MAAM,SAAS,MAAM,uGAAA,CAAA,cAAW,CAAC,OAAO,CAAC,aAAa;QACtD,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,uBAAuB;QACvB,eAAe;QACf,WAAW;QAEX,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/app/api/grades/%5Bid%5D/route.js"],"sourcesContent":["import { connectToDatabase } from \"../../../lib/mongodb\"\r\nimport { ObjectId } from \"mongodb\"\r\n\r\nexport async function DELETE(request, { params }) {\r\n  try {\r\n    const { id } = params\r\n\r\n    // Validate the ID format before attempting to create an ObjectId\r\n    if (!id || id.length !== 24) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          error: \"Ungültige ID\",\r\n        },\r\n        { status: 400 },\r\n      )\r\n    }\r\n\r\n    const { db } = await connectToDatabase()\r\n\r\n    // Ensure the database connection is established\r\n    if (!db) {\r\n      console.error(\"Database connection failed\")\r\n\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          error: \"Datenbankverbindung fehlgeschlagen\",\r\n        },\r\n        { status: 500 },\r\n      )\r\n    }\r\n\r\n    // Log the ID being deleted for debugging\r\n    console.log(`Attempting to delete grade with ID: ${id}`)\r\n\r\n    const result = await db.collection(\"grades\").deleteOne({\r\n      _id: new ObjectId(id),\r\n    })\r\n\r\n    console.log(\"Delete result:\", result)\r\n\r\n    if (result.deletedCount === 0) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          error: \"Note nicht gefunden\",\r\n        },\r\n        { status: 404 },\r\n      )\r\n    }\r\n\r\n    return Response.json({ success: true }, { status: 200 })\r\n  } catch (error) {\r\n    console.error(\"Delete grade error:\", error)\r\n\r\n    return Response.json(\r\n      {\r\n        success: false,\r\n        error: \"Fehler beim Löschen der Note\",\r\n      },\r\n      { status: 500 },\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,OAAO,OAAO,EAAE,EAAE,MAAM,EAAE;IAC9C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG;QAEf,iEAAiE;QACjE,IAAI,CAAC,MAAM,GAAG,MAAM,KAAK,IAAI;YAC3B,OAAO,SAAS,IAAI,CAClB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;QAErC,gDAAgD;QAChD,IAAI,CAAC,IAAI;YACP,QAAQ,KAAK,CAAC;YAEd,OAAO,SAAS,IAAI,CAClB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,yCAAyC;QACzC,QAAQ,GAAG,CAAC,CAAC,oCAAoC,EAAE,IAAI;QAEvD,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,UAAU,SAAS,CAAC;YACrD,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QACpB;QAEA,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,IAAI,OAAO,YAAY,KAAK,GAAG;YAC7B,OAAO,SAAS,IAAI,CAClB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;QAAK,GAAG;YAAE,QAAQ;QAAI;IACxD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QAErC,OAAO,SAAS,IAAI,CAClB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}