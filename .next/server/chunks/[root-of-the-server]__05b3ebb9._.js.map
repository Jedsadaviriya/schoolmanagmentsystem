{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Janjao/OneDrive%20-%20bwd%20365/Dokumente/GitHub/schoolmanagmentsystem/src/app/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\"\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017/schoolManagementSystem\"\r\nconst MONGODB_DB = process.env.MONGODB_DB || \"schoolManagementSystem\"\r\n\r\n// Check if we're in production\r\nconst isProd = process.env.NODE_ENV === \"production\"\r\n\r\n// Connection caching\r\nlet cachedClient = null\r\nlet cachedDb = null\r\n\r\nexport async function connectToDatabase() {\r\n  // If we have a cached connection, use it\r\n  if (cachedClient && cachedDb) {\r\n    return { client: cachedClient, db: cachedDb }\r\n  }\r\n\r\n  // Set options for MongoDB client\r\n  const opts = {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  }\r\n\r\n  try {\r\n    // Connect to MongoDB\r\n    const client = await MongoClient.connect(MONGODB_URI, opts)\r\n    const db = client.db(MONGODB_DB)\r\n\r\n    // Cache the connection\r\n    cachedClient = client\r\n    cachedDb = db\r\n\r\n    return { client, db }\r\n  } catch (error) {\r\n    console.error(\"MongoDB connection error:\", error)\r\n    throw new Error(\"Failed to connect to database\")\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC/C,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAE7C,+BAA+B;AAC/B,MAAM,SAAS,oDAAyB;AAExC,qBAAqB;AACrB,IAAI,eAAe;AACnB,IAAI,WAAW;AAER,eAAe;IACpB,yCAAyC;IACzC,IAAI,gBAAgB,UAAU;QAC5B,OAAO;YAAE,QAAQ;YAAc,IAAI;QAAS;IAC9C;IAEA,iCAAiC;IACjC,MAAM,OAAO;QACX,iBAAiB;QACjB,oBAAoB;IACtB;IAEA,IAAI;QACF,qBAAqB;QACrB,MAAM,SAAS,MAAM,uGAAA,CAAA,cAAW,CAAC,OAAO,CAAC,aAAa;QACtD,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,uBAAuB;QACvB,eAAe;QACf,WAAW;QAEX,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Janjao/OneDrive%20-%20bwd%20365/Dokumente/GitHub/schoolmanagmentsystem/src/app/api/grades/route.js"],"sourcesContent":["import { connectToDatabase } from \"../../lib/mongodb\"\r\n\r\nexport async function GET() {\r\n  try {\r\n    const { db } = await connectToDatabase()\r\n\r\n    if (!db) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          error: \"Datenbankverbindung fehlgeschlagen\",\r\n        },\r\n        { status: 500 },\r\n      )\r\n    }\r\n\r\n    const grades = await db.collection(\"grades\").find({}).toArray()\r\n\r\n    // Transform ObjectId to string for JSON serialization\r\n    const serializedGrades = grades.map((grade) => ({\r\n      ...grade,\r\n      _id: grade._id.toString(),\r\n    }))\r\n\r\n    return Response.json({ success: true, grades: serializedGrades })\r\n  } catch (error) {\r\n    console.error(\"Error fetching grades:\", error)\r\n\r\n    return Response.json(\r\n      {\r\n        success: false,\r\n        error: error.message,\r\n      },\r\n      { status: 500 },\r\n    )\r\n  }\r\n}\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const body = await request.json()\r\n    const { subject, grade, module_id } = body\r\n\r\n    if (!subject || !grade) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          error: \"Fach und Note sind erforderlich\",\r\n        },\r\n        { status: 400 },\r\n      )\r\n    }\r\n\r\n    const { db } = await connectToDatabase()\r\n\r\n    if (!db) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          error: \"Datenbankverbindung fehlgeschlagen\",\r\n        },\r\n        { status: 500 },\r\n      )\r\n    }\r\n\r\n    const newGrade = {\r\n      subject,\r\n      grade,\r\n      module_id: module_id || null,\r\n      createdAt: new Date(),\r\n    }\r\n\r\n    const result = await db.collection(\"grades\").insertOne(newGrade)\r\n\r\n    return Response.json(\r\n      {\r\n        success: true,\r\n        id: result.insertedId.toString(),\r\n      },\r\n      { status: 201 },\r\n    )\r\n  } catch (error) {\r\n    console.error(\"Error creating grade:\", error)\r\n\r\n    return Response.json(\r\n      {\r\n        success: false,\r\n        error: error.message,\r\n      },\r\n      { status: 500 },\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;QAErC,IAAI,CAAC,IAAI;YACP,OAAO,SAAS,IAAI,CAClB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC,GAAG,OAAO;QAE7D,sDAAsD;QACtD,MAAM,mBAAmB,OAAO,GAAG,CAAC,CAAC,QAAU,CAAC;gBAC9C,GAAG,KAAK;gBACR,KAAK,MAAM,GAAG,CAAC,QAAQ;YACzB,CAAC;QAED,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;YAAM,QAAQ;QAAiB;IACjE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QAExC,OAAO,SAAS,IAAI,CAClB;YACE,SAAS;YACT,OAAO,MAAM,OAAO;QACtB,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG;QAEtC,IAAI,CAAC,WAAW,CAAC,OAAO;YACtB,OAAO,SAAS,IAAI,CAClB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;QAErC,IAAI,CAAC,IAAI;YACP,OAAO,SAAS,IAAI,CAClB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW;YACf;YACA;YACA,WAAW,aAAa;YACxB,WAAW,IAAI;QACjB;QAEA,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,UAAU,SAAS,CAAC;QAEvD,OAAO,SAAS,IAAI,CAClB;YACE,SAAS;YACT,IAAI,OAAO,UAAU,CAAC,QAAQ;QAChC,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QAEvC,OAAO,SAAS,IAAI,CAClB;YACE,SAAS;YACT,OAAO,MAAM,OAAO;QACtB,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}