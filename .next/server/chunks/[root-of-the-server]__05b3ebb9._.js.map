{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/app/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\r\nconst dbName = \"schoolManagementSystem\";\r\nlet client;\r\nlet clientPromise;\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  console.warn(\"MONGODB_URI not set, using default localhost connection.\");\r\n}\r\n\r\nconst options = {};\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // In development, use a global variable to preserve the connection\r\n  if (!global._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    global._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // In production, create a new connection\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\nexport async function connectToDatabase() {\r\n  const client = await clientPromise;\r\n  const db = client.db(dbName);\r\n  return { db, client };\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS;AACf,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,QAAQ,IAAI,CAAC;AACf;AAEA,MAAM,UAAU,CAAC;AAEjB,wCAA4C;IAC1C,mEAAmE;IACnE,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAIP;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM;IACrB,MAAM,KAAK,OAAO,EAAE,CAAC;IACrB,OAAO;QAAE;QAAI;IAAO;AACtB","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/app/api/grades/route.js"],"sourcesContent":["import { connectToDatabase } from \"../../lib/mongodb\";\r\nimport { ObjectId } from \"mongodb\"\r\n\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const { subject, grade, date } = await request.json();\r\n    const { db } = await connectToDatabase();\r\n\r\n    const result = await db.collection(\"grades\").insertOne({\r\n      subject,\r\n      grade,\r\n      date: date || new Date().toISOString(),\r\n      createdAt: new Date().toISOString(),\r\n    });\r\n\r\n    return new Response(\r\n      JSON.stringify({ success: true, id: result.insertedId }),\r\n      {\r\n        status: 201,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ success: false, error: error.message }),\r\n      {\r\n        status: 500,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const { db } = await connectToDatabase();\r\n    const grades = await db.collection(\"grades\").find({}).toArray();\r\n\r\n    return new Response(JSON.stringify({ success: true, grades }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ success: false, error: error.message }),\r\n      {\r\n        status: 500,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport async function DELETE(request, { params }) {\r\n  try {\r\n    const { id } = params\r\n    const { db } = await connectToDatabase()\r\n\r\n    const result = await db.collection(\"grades\").deleteOne({\r\n      _id: new ObjectId(id),\r\n    })\r\n\r\n    if (result.deletedCount === 0) {\r\n      return new Response(JSON.stringify({ success: false, error: \"Note nicht gefunden\" }), {\r\n        status: 404,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n    }\r\n\r\n    return new Response(JSON.stringify({ success: true }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ success: false, error: error.message }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QACnD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;QAErC,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,UAAU,SAAS,CAAC;YACrD;YACA;YACA,MAAM,QAAQ,IAAI,OAAO,WAAW;YACpC,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,SAAS;YAAM,IAAI,OAAO,UAAU;QAAC,IACtD;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,IACtD;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;QACrC,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC,GAAG,OAAO;QAE7D,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAM;QAAO,IAAI;YAC7D,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,IACtD;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF;AAGO,eAAe,OAAO,OAAO,EAAE,EAAE,MAAM,EAAE;IAC9C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG;QACf,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;QAErC,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,UAAU,SAAS,CAAC;YACrD,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QACpB;QAEA,IAAI,OAAO,YAAY,KAAK,GAAG;YAC7B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAsB,IAAI;gBACpF,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;QAAK,IAAI;YACrD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,IAAI;YAC5E,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}