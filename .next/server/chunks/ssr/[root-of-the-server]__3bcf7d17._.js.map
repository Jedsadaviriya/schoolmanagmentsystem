{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/components/theme-provider.jsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { createContext, useContext, useEffect, useState } from \"react\"\r\n\r\nconst initialState = {\r\n  theme: \"dark\",\r\n  setTheme: () => null,\r\n}\r\n\r\nconst ThemeProviderContext = createContext(initialState)\r\n\r\nexport function ThemeProvider({ children, storageKey = \"theme\", ...props }) {\r\n  const [theme, setTheme] = useState(\"dark\")\r\n\r\n  // Initialize theme based on system preference or stored preference\r\n  useEffect(() => {\r\n    // Sicherstellen, dass der Code nur im Browser ausgeführt wird\r\n    if (typeof window !== \"undefined\") {\r\n      const storedTheme = localStorage.getItem(storageKey)\r\n\r\n      if (storedTheme) {\r\n        setTheme(storedTheme)\r\n      } else {\r\n        // Check system preference\r\n        const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\"\r\n        setTheme(systemTheme)\r\n      }\r\n    }\r\n  }, [storageKey])\r\n\r\n  useEffect(() => {\r\n    // Sicherstellen, dass der Code nur im Browser ausgeführt wird\r\n    if (typeof window !== \"undefined\") {\r\n      const root = window.document.documentElement\r\n      root.classList.remove(\"light\", \"dark\")\r\n      root.classList.add(theme)\r\n    }\r\n  }, [theme])\r\n\r\n  const value = {\r\n    theme,\r\n    setTheme: (theme) => {\r\n      if (typeof window !== \"undefined\") {\r\n        localStorage.setItem(storageKey, theme)\r\n      }\r\n      setTheme(theme)\r\n    },\r\n  }\r\n\r\n  return (\r\n    <ThemeProviderContext.Provider {...props} value={value}>\r\n      {children}\r\n    </ThemeProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeProviderContext)\r\n\r\n  if (context === undefined) throw new Error(\"useTheme must be used within a ThemeProvider\")\r\n\r\n  return context\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAIA,MAAM,eAAe;IACnB,OAAO;IACP,UAAU,IAAM;AAClB;AAEA,MAAM,qCAAuB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAE;AAEpC,SAAS,cAAc,EAAE,QAAQ,EAAE,aAAa,OAAO,EAAE,GAAG,OAAO;IACxE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,mEAAmE;IACnE,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,8DAA8D;QAC9D,uCAAmC;;QAUnC;IACF,GAAG;QAAC;KAAW;IAEf,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,8DAA8D;QAC9D,uCAAmC;;QAInC;IACF,GAAG;QAAC;KAAM;IAEV,MAAM,QAAQ;QACZ;QACA,UAAU,CAAC;YACT,uCAAmC;;YAEnC;YACA,SAAS;QACX;IACF;IAEA,qBACE,8OAAC,qBAAqB,QAAQ;QAAE,GAAG,KAAK;QAAE,OAAO;kBAC9C;;;;;;AAGP;AAEO,MAAM,WAAW;IACtB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,YAAY,WAAW,MAAM,IAAI,MAAM;IAE3C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/components/ThemeContext.jsx"],"sourcesContent":["// src/components/ThemeContext.jsx\r\n'use client';\r\n\r\nimport { createContext, useState, useEffect, useContext } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState('dark');\r\n\r\n  useEffect(() => {\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prev => (prev === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => useContext(ThemeContext);"],"names":[],"mappings":"AAAA,kCAAkC;;;;;;AAGlC;AAFA;;;AAIA,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD;AAE1B,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAAE;IACxC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,UAAU,QAAQ;YACpB,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;QACzC,OAAO;YACL,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5C;IACF,GAAG;QAAC;KAAM;IAEV,MAAM,cAAc;QAClB,SAAS,CAAA,OAAS,SAAS,UAAU,SAAS;IAChD;IAEA,qBACE,8OAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAO;QAAY;kBAChD;;;;;;AAGP;AAEO,MAAM,WAAW,IAAM,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/loris/OneDrive/Dokumente/GitHub/schoolmanagmentsystem/src/components/ThemeSwitcher.jsx"],"sourcesContent":["// src/components/ThemeSwitcher.jsx\r\n'use client';\r\n\r\nimport { useTheme } from './ThemeContext';\r\n\r\nexport default function ThemeSwitcher() {\r\n  const { theme, toggleTheme } = useTheme();\r\n\r\n  return (\r\n    <button\r\n      onClick={toggleTheme}\r\n      className=\"px-4 py-2 bg-secondary-500 text-secondary-foreground rounded hover:bg-secondary-600\"\r\n    >\r\n      Wechsel zu {theme === 'light' ? 'Dark' : 'Light'} Mode\r\n    </button>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,mCAAmC;;;;;AAGnC;AAFA;;;AAIe,SAAS;IACtB,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,WAAQ,AAAD;IAEtC,qBACE,8OAAC;QACC,SAAS;QACT,WAAU;;YACX;YACa,UAAU,UAAU,SAAS;YAAQ;;;;;;;AAGvD","debugId":null}}]
}